# -*- coding: utf-8 -*-
"""DogsVSCat.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RXjH3XxvO8GwnRczinfzSwN8IGN3nTlu
"""

!pip install opendatasets

"""Importing Libraries"""

import opendatasets as od
import os
import numpy as np
import cv2
from tensorflow import keras
from keras.applications.vgg16 import VGG16
from keras.layers import Dense
from keras import Sequential

"""Downloading the dataset"""

od.download('https://www.kaggle.com/datasets/salader/dogs-vs-cats')

"""Preparing the Model"""

base_model = VGG16(include_top = False,weights='imagenet',input_shape=(150,150,3))

from keras.layers import Flatten
model = Sequential()
model.add(base_model)
model.add(Flatten())
model.add(Dense(128,activation='relu'))
model.add(Dense(1,activation = 'sigmoid'))
base_model.trainable = False
model.summary()

"""Preparing the training dataset and labels"""

data_path = '/content/dogs-vs-cats/train/'
class_names = sorted(os.listdir(data_path))
num_classes = len(class_names)
print(class_names)

from keras.applications.vgg16 import preprocess_input
train_data = np.empty((6000,150,150,3))
i=0
for cl in class_names:
  k=0
  print(cl,end = '=>')
  for img in os.listdir(data_path + cl):
        if(k==3000):
            break
        image = np.asarray(cv2.resize(cv2.imread(data_path+cl+'/'+img,cv2.IMREAD_COLOR),[150,150]))
        image = preprocess_input(image)
        train_data[i]=image
        i=i+1
        k=k+1
  print('done')

labels = np.empty(6000,dtype = int)
labels[:3000] = 0
labels[3000:] = 1

"""Preparing the validation data and labels"""

valid_data = np.empty((1000,150,150,3))
data_path = '/content/dogs-vs-cats/test/'
class_name = sorted(os.listdir(data_path))
num_classes = len(class_name)
print(class_name)

i=0
for cl in class_name:
  k=0
  print(cl,end = '=>')
  for img in os.listdir(data_path + cl):
        if(k==500):
            break
        image = np.asarray(cv2.resize(cv2.imread(data_path+cl+'/'+img,cv2.IMREAD_COLOR),[150,150]))
        image = preprocess_input(image)
        valid_data[i]=image
        i=i+1
        k=k+1
  print('done')

valid_labels = np.empty(1000,dtype=int)
valid_labels[:500] = 0
valid_labels[500:] = 1

"""Compiling and fitting the model"""

model.compile(optimizer='adam',metrics=['accuracy'],loss='binary_crossentropy')

from keras.callbacks import EarlyStopping
callback = EarlyStopping(monitor='val_loss',patience=3)

model.fit(x=train_data,y=labels,epochs=20,batch_size = 32,validation_data=(valid_data,valid_labels),callbacks=[callback])

train_loss, train_acc = model.evaluate(x=train_data,y=labels)
test_loss, test_acc   = model.evaluate(x=valid_data,y=valid_labels)
print("final train accuracy = {:.2f} , Test accuracy = {:.2f}".format(train_acc*100, test_acc*100))